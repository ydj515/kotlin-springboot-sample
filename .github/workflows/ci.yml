name: CI Pipeline

on:
  push:
    branches:
      - '*'
#      - main
#  pull_request:
#    branches:
#      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 코드 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v2

      # config copy => 추후 환경변수 & secret값으로 변경 예정
      - name: Copy application.yml
        run: cp src/main/resources/application-sample.yml src/main/resources/application.yml

      - name: Create jwt.yml
        run: cp src/main/resources/jwt-sample.yml src/main/resources/jwt.yml

      # JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Gradle 설정
      - name: Set up Gradle
        uses: gradle/wrapper-validation-action@v1
        with:
          gradle-version: '8.10'

      # 빌드
      - name: Build with Gradle
        run: ./gradlew build

      # 테스트
      - name: Run tests
        run: ./gradlew test

      # 아티팩트 업로드
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ci-artifacts
          path: build/libs/*.jar

  dockerize:
    runs-on: ubuntu-latest
    needs: build
    steps:
      # 코드 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v2

      # 아티팩트 다운로드
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: ci-artifacts
          path: ci-artifacts # 해당 디렉토리로 다운로드

      # 파일 이동
      - name: Move artifact to build directory
        run: mkdir -p build && mv ci-artifacts/*.jar build/

      # Docker 설치
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Docker Hub 로그인
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Docker 이미지 빌드 및 푸시
      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.APP_NAME }}:latest

  deploy:
    runs-on: ubuntu-latest
    needs: dockerize
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PEM_KEY }}
          script: |
            # Docker 로그인
            echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

            # Docker 이미지 Pull
            docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.APP_NAME }}:latest

            # 기존 컨테이너 중지 및 제거
            docker stop my-app || true
            docker rm my-app || true

            # Docker 컨테이너 실행
            docker run -d --name my-app -p 80:8080 ${{ secrets.DOCKER_USERNAME }}/${{ secrets.APP_NAME }}:latest
            
            # 중지된 지 30시간 이상 지난 이미지만 삭제
            docker container prune --filter until=30h
